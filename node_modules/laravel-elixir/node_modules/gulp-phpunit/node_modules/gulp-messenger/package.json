{
  "name": "gulp-messenger",
  "description": "Console and File Logger",
  "version": "0.7.0",
  "repository": {
    "type": "git",
    "url": "https://github.com/mikeerickson/gulp-messenger"
  },
  "author": {
    "name": "codedungeon",
    "email": "codedungeon@gmail.com"
  },
  "files": [
    "index.js"
  ],
  "keywords": [
    "gulpplugin",
    "notification",
    "console",
    "log",
    "logger",
    "express"
  ],
  "license": "MIT",
  "dependencies": {
    "bowser": "1.0.0",
    "chalk": "1.1.1",
    "chalkline": "0.0.4",
    "defaults": "^1.0.2",
    "detect-node": "^2.0.3",
    "gulp-debug": "2.1.2",
    "is_js": "0.7.4",
    "lodash": "^3.0.0",
    "lodash-deep": "^1.6.0",
    "mkdirp": "^0.5.1",
    "moment": "^2.10.3",
    "pretty-hrtime": "^1.0.0",
    "purdy": "1.4.1",
    "through2": "^0.6.3",
    "winston": "^1.0.0"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "bugs": {
    "url": "https://github.com/mikeerickson/gulp-messenger/issues"
  },
  "homepage": "https://github.com/mikeerickson/gulp-messenger",
  "main": "index.js",
  "devDependencies": {
    "chai": "^3.3.0",
    "gulp": "3.9.0",
    "gulp-clean": "^0.3.1",
    "gulp-mocha": "2.1.3",
    "gulp-run": "1.6.11",
    "gulp-todo": "4.0.0",
    "install": "^0.1.8",
    "is_js": "^0.7.4",
    "jshint-summary": "0.4.0",
    "karma": "^0.13.10",
    "karma-chai": "^0.1.0",
    "karma-chrome-launcher": "^0.2.0",
    "karma-mocha": "^0.2.0",
    "karma-mocha-reporter": "^1.1.1",
    "karma-phantomjs-launcher": "^0.2.1",
    "karma-should": "^1.0.0",
    "lodash": "^3.0.0",
    "lodash-deep": "^1.6.0",
    "mkdirp": "^0.5.1",
    "mocha": "^2.3.3",
    "mocha-sinon": "1.1.4",
    "mochawesome": "1.2.1",
    "npm": "^2.11.0",
    "path-exists": "^1.0.0",
    "phantomjs": "^1.9.18",
    "require-dir": "^0.3.0",
    "should": "^7.1.0",
    "sinon": "1.17.2"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha spec"
  },
  "maintainers": [
    {
      "name": "codedungeon",
      "email": "codedungeon@gmail.com"
    }
  ],
  "readme": "# gulp-messenger\n### gulp plugin for browser, command line notification and logging!\n\n[![Build Status](https://travis-ci.org/mikeerickson/gulp-messenger.svg?branch=master)](https://travis-ci.org/mikeerickson/gulp-messenger) [![Dependency Status](https://gemnasium.com/mikeerickson/gulp-messenger.svg)](https://gemnasium.com/mikeerickson/gulp-messenger) [![npm](https://img.shields.io/npm/dm/localeval.svg)]() [![npm](https://img.shields.io/badge/mocha-passed-green.svg)]()\n\n\n\n\n### Install with [npm](npmjs.org)\n\n```sh\nnpm install gulp-messenger\n```\n\n### Usage\n\n```js\nvar msg = require('gulp-messenger');\n\nmsg.init(); // initialize module, otherwise defaults will be used\n\n// this example will enable file logging (see options below)\nmsg.init({logToFile: true});\n\n\n// this will disable logging to file and interpolation variables will be font style as message (no bold)\nvar options = { logToFile: false, boldVariables: false };\nmsg.init(options);\n\n\nmsg.Info('-', 'Loading...', '*');\nmsg.Info   ('style: <%= name %>', {name: 'info'});\nmsg.Success('style: <%= name %>', {name: 'success'});\nmsg.Warning('style: <%= name %>', {name: 'warning'});\nmsg.Error  ('style: <%= name %>', {name: 'error'});\nmsg.Note   ('style: <%= name %>', {name: 'note'});\nmsg.Time   ('style: <%= name %>', {name: 'time'});\nmsg.Debug  ('style: <%= name %>', {name: 'debug'});\n```\n\n\n### API\n#### info/Info, success/Success, warning/Warning, error/Error, note/Note, time/Time, debug/Debug, line/Line\n\n- lowercase methods are to be used in gulp pipeline or outside (same API can be used for both Node, Browser, and Gulp)\n- Titlecase methods are to be used outside of gulp (ie Node or browser)\n\nDefault Options (supplied to `init` method)\n\n```js\nvar defOptions = {\n    logToFile:     false,\n    logToConsole:  true,\n    logPath:       'logs/',\n    logFile:       'app.log',\n    timestamp:     false,\n    rotateLog:     false,\n    boldVariables: true\n};\n\nlogToFile (default: false)\n- will log the supplied message to `logger` instance and log to file \n\nlogToConsole (default: true)\n- will log message to console \n\nlogPath (default: 'logs/' at root level)\n- desired path where log files will be stored \n\nlogFile (default: 'app.log')\n- desired filename where log files will be stored \n\ntimestamp (default: false)\n- Will include timestamp on consoled messages \n\nrotateLog (default: false)\n- will create a new log file each day \n\nboldVariables (default: true)\n- when perform interpolation, the actual variable will be bold \n\n\n```\n\nFor example `info`\nUse `msg.info` for each file into the stream\n\n```js\n\nmsg.Info('This information message logged to console and optionally log file.  Configured by `options` parameter supplied to `msg.init` method');\nmsg.info('This information message logged to console and optionally log file.  Configured by `options` parameter supplied to `msg.init` method');\n\nor -\n\ngulp.src('src/**/*')\n    .pipe(msg.flush.info('Piping Message')); //'Piping Message' for each file\n```\n\nUse `msg.flush.info` at the and of the stream\n\n```js\ngulp.src('src/**/*')\n    .pipe(msg.flush.info('Process Completed Successfully')); //'Process Completed Successfully' at the and of stream\n```\n\nUse `msg.Info` from the outside of the stream\n\n```js\nmsg.Info('Application Message'); //'Application Message' in node.js application\n```\n\n### msg.version|msg.Version \n\nReturns current module version\n\n### msg.Info([before,] message, [after,] [data])\n\nShow message\n\n#### Parameters\n\n##### before\n##### after\nType: `String`\n\nDelimiter before/after the message. Each character is repeated 80 times\n\n#### Usage\n\n```js\nmsg.Info('--', 'Hello World', '*')\n```\n\n##### data\nType: `Object`\n\nData for message. Inherited values:\n\n<pre>\nenv           - process.env\nfile          - vinyl file\nfile.relative - relative path (extra field)\nfile.basename - basename (extra field)\nduration      - duration of streaming\ntotalDuration - duration from gulpfile start\n</pre>\n\n\n##### message\nType: `String`\n\nLodash compatible template (may also use Underscore over Lodash).\n\n#### Usage\n\n```js\nmsg.Info('Environment: <%= env.NODE_ENV %>. Name: <%= name %>', {name: 'codedungeon'})\n//Environment: dev. name: codedungeon\n```\n\n\n### License\n\nCopyright (c) 2015 Mike Erickson\nReleased under the MIT license\n\n\n### Credits\n\ngulp-messenger written by Mike Erickson\n\nE-Mail: [codedungeon@gmail.com](mailto:codedungeon@gmail.com)\n\nTwitter: [@codedungeon](http://twitter.com/codedungeon)\n\nWebiste: [codedungeon.org](http://codedungeon.org)\n\n***\n",
  "readmeFilename": "README.md",
  "_id": "gulp-messenger@0.7.0",
  "dist": {
    "shasum": "a942c422fd4bdabddfaf1ea3623872d3caed3964"
  },
  "_from": "gulp-messenger@0.7.0",
  "_resolved": "https://registry.npm.taobao.org/gulp-messenger/download/gulp-messenger-0.7.0.tgz"
}
