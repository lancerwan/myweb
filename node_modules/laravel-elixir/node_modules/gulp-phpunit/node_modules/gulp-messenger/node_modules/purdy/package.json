{
  "name": "purdy",
  "version": "1.4.1",
  "description": "pretty print objects in real purdy colors. Allows clearer visualization of objects than you get from most pretty printers due to colors. It will also print out the complete path to an object, something that's extremly useful for debugging. Purdy will also print out the path to access a variable using Hoek format making it useful on accessing values.",
  "main": "index.js",
  "scripts": {
    "test": "make test-cov"
  },
  "homepage": "https://github.com/danielb2/purdy.js",
  "bugs": {
    "url": "https://github.com/danielb2/purdy.js/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/danielb2/purdy.js.git"
  },
  "author": {
    "name": "Daniel Bretoi"
  },
  "keywords": [
    "ansi",
    "terminal",
    "colors",
    "pretty",
    "print",
    "color"
  ],
  "license": "MIT",
  "devDependencies": {
    "lab": "4.x.x"
  },
  "dependencies": {
    "hoek": "2.x.x",
    "chalk": "0.4.x"
  },
  "readme": "# Purdy\n\nPrint things real purdy for nodejs.\n\n## Usage\n\n```javascript\n    var Purdy = require('purdy');\n    Purdy({list: [1,2,3], string: 'some string'});\n```\n\n### `Purdy(object, [options])`\n\nPrints anything indented, and with arrays with index keys, and different\ntypes in colors such that it's very easy to get an overview of what object\nyou're dealing with.\n\n* `object` - anything, number, object, array, etc.\n* `options` - optional object with the following keys.\n    * `plain` - when `true`, prints result without colors. Defaults to `false` with tty, `true` when not.\n    * `path` - when `true`, prints result with a path (To be used with [Hoek.reach()](https://github.com/spumko/hoek#reachobj-chain-options))\n    * `pathPrefix` - prefix for path. default: `// `\n    * `arrayIndex` - enables index printing for arrays. default: `true`\n    * `indent` - defines the number of spaces to indent default: `4`\n    * `align` - determines how to align object keys. default: `left`\n\n\n### `Purdy.stringify(object, [options])`\n\nThis function returns a string without printing it to stdout. This may prove\nto be useful for log files other other applications.\n\n``` javascript\nvar purdyString = Purdy.stringify({a: 'b'}, {plain: true});\nwriteLog(purdyString);\n```\n\n### Examples\n\n``` javascript\nvar Purdy = require('purdy');\nvar circularObj = { };\ncircularObj.a = circularObj;\nPurdy({\n    integer: Date.now(),\n    string: 'foo',\n    anonymous: Purdy,\n    defined: function Yes() {},\n    nested: {hello: 'hapi'},\n    error: new Error('bad'),\n    null: null,\n    undefined: undefined,\n    regexp: new RegExp,\n    falseBool: false,\n    trueBool: true,\n    emptyArr: [],\n    circular: circularObj,\n    date: new Date(),\n    arrayWithVisibleIndex: [ 'one', 'two', 'three' ]\n});\n```\n\n![image](https://github.com/danielb2/purdy/raw/master/example.png)\n\n\n``` javascript\n// var obj = {\n//     travel: {\n//         down: {\n//             a: [{\n//                 path: 'to get here'\n//             }]\n//         }\n//     }\n// Purdy(obj, { path: true });\n\n{\n    travel: {\n        // travel.down\n        down: {\n            // travel.down.a\n              a: [\n                // travel.down.a.0\n                [0] {\n                    // travel.down.a.0.path\n                    path: 'to get here'\n                }\n            ]\n        }\n    }\n}\n\n// var Hoek = require('hoek');\n// Purdy(Hoek.reach(obj, 'travel.down.a.0.path'));\n\n{\n        path: 'to get here'\n}\n\n```\n\n\n\n## Acknowledgements\n* Michael Dvorkin for [Awesome Print]\n\n[Awesome Print]: https://github.com/michaeldv/awesome_print\n",
  "readmeFilename": "README.md",
  "_id": "purdy@1.4.1",
  "dist": {
    "shasum": "67b8b7271953288fd31e3e08923d4a48b4bde4de"
  },
  "_from": "purdy@1.4.1",
  "_resolved": "https://registry.npm.taobao.org/purdy/download/purdy-1.4.1.tgz"
}
